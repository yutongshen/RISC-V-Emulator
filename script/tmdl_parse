#!/bin/bash

count=0;
caller_pat="\/\*[[:blank:]]*TM_PRINT[[:blank:]]*=[[:blank:]]*\"([[:print:]]*)\"(.*)\*\/";
arg_pat="^[[:blank:]]*([^[:blank:]]+.*[^[:blank:]]+|[^[:blank:]]+)[[:blank:]]*$"
FLAG="";

Parse()
{
    line=${1};
    out=${1};
    if [[ $line =~ $caller_pat ]]; then
        caller=${BASH_REMATCH[0]};
        fmt=${BASH_REMATCH[1]};
        items=${BASH_REMATCH[2]};
        args=();
        match=true;
        IFS=','; read -ra items <<< "${items}";
        IFS='%'; read -ra flags <<< "${fmt/%%/}";
        for arg in "${items[@]:1}"; do
            if [[ ! ${arg} =~ ${arg_pat} ]]; then
                match=false
                break;
            fi
            args+=(${BASH_REMATCH[1]});
        done
        flags=${flags[@]:1};
        IFS='';
        if [[ ${match} ]]; then
            extend="${caller}"
            if [[ "${FLAG}" == "S" ]]; then
                extend="${extend} sd a0, -8(sp); sd a1, -16(sp);"
                if [[ ${#args[@]} -gt 0 ]]; then
                    extend="${extend} li a0, TMDL_RG_TM_ARGS;"
                fi
            fi
            i=0
            for arg in "${args[@]}"; do
                if [[ "${FLAG}" == "S" ]]; then
                    if [[ ${arg} =~ ^[0-9]+$|^0[xb][0-9]+$ ]]; then
                        extend="${extend} li a1, ${arg};"
                    elif [[ "${arg}" == "a0" ]]; then
                        extend="${extend} ld a1, -8(sp);";
                    elif [[ "${arg}" == "a1" ]]; then
                        extend="${extend} ld a1, -16(sp);";
                    else
                        extend="${extend} mv a1, ${arg};";
                    fi
                    extend="${extend} sd a1, 0(a0);";
                else
                    [[ ${flags[${i}]} =~ ^[-+0-9\.\ ]*f.*$ ]] \
                        && extend="${extend} *(float *)TMDL_RG_TM_ARGS = ${arg};" \
                        || extend="${extend} *TMDL_RG_TM_ARGS_64P = ${arg};";
                fi
            done
            [[ "${FLAG}" == "S" ]] \
                && extend="${extend} li a0, TMDL_RG_TM_PRINT; li a1, ${count}; sd a1, 0(a0); ld a0, -8(sp); ld a1, -16(sp);" \
                || extend="${extend} *TMDL_RG_TM_PRINT_64P = ${count};";
            out=${1/"${caller}"/"${extend}"};
            # echo "LINE:   ${1}";
            # echo "CALLER: ${caller}";
            # echo "EXTEND: ${extend}";
            # echo "LOG:    ${fmt}";
            # echo "OUT:    ${out}";
            echo "${fmt}" >> ${logfile};
            count=`expr ${count} + 1`;
        fi
    fi
    echo "${out}" >> ${outfile};
}

InitLog()
{
    filename=${1};
    [[ -f ${filename} ]] && count=$(wc -l < ${filename}) || touch ${filename};
}

ARGERR=0
ARGS=()

while [[ $# -gt 0 ]]
do
    ARG="$1"
    case ${ARG} in
        -c)
        if [ "$FLAG" != "" ]; then
            ARGERR=1
            break
        fi
        FLAG="C"
        shift
        ;;
        -s)
        if [ "$FLAG" != "" ]; then
            ARGERR=1
            break
        fi
        FLAG="S"
        shift
        ;;
        *)
        ARGS+=("${1}")
        shift
        ;;
    esac
done

if [ ${ARGERR} -gt 0 ] || [ "${FLAG}" == "" ]; then
    echo "There are some argument errors."
    exit 1
fi

if [ ! -f "${ARGS[0]}" ]; then
    echo "Cannot find file or directory: ${ARGS[0]}"
    exit 1
fi

infile=${ARGS[0]}
outfile=${ARGS[1]}
logfile=${ARGS[2]}


rm -rf ${outfile};
echo "#include \"mmap_soc.h\"" > ${outfile};
InitLog ${logfile};
IFS='';
while read -r line; do
    # echo ${line};
    Parse "${line}";
done < ${infile}
