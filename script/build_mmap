#!/bin/bash

InitMemoryMap()
{
    MMAP_H=${1}
    DIR=${2}
    OUTPUT="${DIR}"
    
    echo "// Memory Mapped Defination"                   >  "${OUTPUT}"
    echo "#ifndef UINT32P"                               >> "${OUTPUT}"
    echo "#define UINT32P volatile unsigned int *"       >> "${OUTPUT}"
    echo "#endif"                                        >> "${OUTPUT}"
    echo "#ifndef UINT64P"                               >> "${OUTPUT}"
    echo "#define UINT64P volatile unsigned long long *" >> "${OUTPUT}"
    echo "#endif"                                        >> "${OUTPUT}"
    echo ""                                              >> "${OUTPUT}"
    while read line;
    do
        word=(${line})
        if [ "${word[0]}" == "#define" ] && [[ ${word[1]} == *_BASE ]]; then
            echo "// ==============================" >> "${OUTPUT}"
            echo "//  ${word[1]}"                    >> "${OUTPUT}"
            echo "// ==============================" >> "${OUTPUT}"
            echo "#define ${word[1]} ${word[2]}"     >> "${OUTPUT}"
            echo ""                                  >> "${OUTPUT}"
        fi
    done < ${MMAP_H}
}

XtendFile()
{
    MMAP_SOC_H=${1}
    MMAP_XTEND_H=${2}
    BASE=""
    LINE_NUM=0
    FIND_BASE=0
    
    while read line;
    do
        word=(${line})
        if [ "${BASE}" == "" ]; then # Find base
            if [ "${word[0]}" == "//" ] || [ "${word[0]}" == "/*" ]; then
                if [[ ${word[1]} == *_BASE ]]; then
                    BASE=${word[1]}
                    while read line2;
                    do
                        LINE_NUM=`expr ${LINE_NUM} + 1`
                        word2=(${line2})
                        if [ "${word2[0]}" == "#define" ]; then
                            if [ "${word2[1]}" == "${BASE}" ] || [[ ${word2[1]%_BASE} == ${BASE%_BASE}_* ]]; then
                                BASE="${word2[1]}"
                                FIND_BASE=1
                                break
                            fi
                        fi
                    done < ${MMAP_SOC_H}
                    if [ ${FIND_BASE} -eq 0 ]; then
                        exit
                    fi
                fi
            fi
        else
            if [ "${word[0]}" == "#define" ] && [[ ${word[1]} == RG_* ]]; then
                sed -i "${LINE_NUM} a #define\ ${BASE%BASE}${word[1]}_64P\ ((UINT64P) (${BASE}\ +\ ${word[2]}))" ${MMAP_SOC_H}
                sed -i "${LINE_NUM} a #define\ ${BASE%BASE}${word[1]}_32P\ ((UINT32P) (${BASE}\ +\ ${word[2]}))" ${MMAP_SOC_H}
                sed -i "${LINE_NUM} a #define\ ${BASE%BASE}${word[1]}\ (${BASE}\ +\ ${word[2]})" ${MMAP_SOC_H}
                LINE_NUM=`expr ${LINE_NUM} + 3`
            fi
        fi
    done < ${MMAP_XTEND_H}

}

ARGERR=0
FLAG=""
ARGS=()

while [[ $# -gt 0 ]]
do
    ARG="$1"
    case ${ARG} in
        -i|--init)
        if [ "$FLAG" != "" ]; then
            ARGERR=1
            break
        fi
        FLAG="INIT"
        shift
        ;;
        -x|--xtend)
        if [ "$FLAG" != "" ]; then
            ARGERR=1
            break
        fi
        FLAG="XTEND"
        shift
        ;;
        *)
        ARGS+=("${1}")
        shift
        ;;
    esac
done

if [ ${ARGERR} -gt 0 ] || [ "${FLAG}" == "" ]; then
    echo "There are some argument errors."
    exit 1
fi

if [ ! -f "${ARGS[0]}" ]; then
    echo "Cannot find file or directory: ${ARGS[0]}"
    exit 1
fi

if [ ${FLAG} == "XTEND" ] && [ ! -f "${ARGS[1]}" ]; then
    echo "Cannot find file or directory: ${ARGS[1]}"
    exit 1
fi

case ${FLAG} in
    INIT)
    InitMemoryMap ${ARGS[0]} ${ARGS[1]}
    ;;
    XTEND)
    XtendFile ${ARGS[0]} ${ARGS[1]}
    ;;
esac

